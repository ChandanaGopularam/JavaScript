
	PROMISE:
-A promise is a special javascript object that represents the eventual completion (or failure) of an asynchronous operation.
-It allows to handle asynchronous tasks more efficiently than callbacks.
-There are 3 states in promise:
i.	Pending: The initial state, the promise is still waiting for the operation to finish.
ii.	Fulfilled: The operation completed successfully.
iii.	Rejected: The operation failed.
-Explanation:
•	To create a promise – new Promise()
   Two parameters:
	resolve(): To mark the promise as successfully.
			reject(): Mark it as failed.
•	Handling the result:
.then(): 
-This method is called when promise is fulfilled.
-It will receive the result from resolve().
.catch():
-This method is called if the promise is rejected.
-It receives the error message from reject().
	-Ex: let myPromise= new Promise((resolve,reject)=>{
        let success=true;
        if(success){
            resolve("The operation is successfull.");
        }else{
            reject("The operation is failed.");
         }
        });
        myPromise.then(result=>{
           console.log(result);
        }).catch(error=>{
           console.log(error);
        });

Changing Promises:
	-Ex: let promise=new Promise((resolve,reject)=>{
        resolve(5)
        //intial resolve value is 5.
       })
       promise.then(result=>{
          console.log(result)
          return result*2
          //returns a new value
       }).then(result=>{
          console.log(result)
          return result+3
          //returns a new value
       }).then(result=>{
          console.log(result);
       }).catch(error=>{
          console.log("Error",error)
       })
Promise with setTimeOut:
-Asynchronous task using setTimeOut, and the promise will resolve after a certain amount of time.
-Ex: let fetchData=new Promise((resolve,reject)=>{
        let dataFetched=true
        setTimeout(()=>{
            if(dataFetched=true){
                resolve("Data fetched successfully.")
            }else{
                reject("Data fetched failed.")
            }    
        },2000)
    })
    fetchData.then(result=>{
        console.log(result)
    }).catch(error=>{
        console.log("Error",error)
    }) 
